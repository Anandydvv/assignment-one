"use client";

import { useMemo, useState } from "react";

type Tab = { title: string; content: string };

export default function TabsGen() {
  const [tabs, setTabs] = useState<Tab[]>([
    { title: "Step 1", content: "Step 1: Do something." },
    {
      title: "Step 2",
      content:
        "Step 2:\n1. Install VSCode\n2. Install Chrome\n3. Install Node\n4. etc",
    },
    { title: "Step 3", content: "Step 3: Finish." },
  ]);
  const [active, setActive] = useState(1); // highlight Step 2

  // ðŸŸ¢ ADD tab
  function addTab() {
    setTabs((t) => [
      ...t,
      { title: `Step ${t.length + 1}`, content: `Step ${t.length + 1}: ...` },
    ]);
    setActive(tabs.length); // switch to the new one
  }

  // ðŸ”´ REMOVE tab
  function removeTab() {
    if (tabs.length > 1) {
      const newTabs = tabs.slice(0, -1); // drop last
      setTabs(newTabs);

      // adjust active index if needed
      if (active >= newTabs.length) {
        setActive(newTabs.length - 1);
      }
    }
  }

  // ðŸ”¨ OUTPUT string generation (now uses CSS variables)
  const output = useMemo(() => {
    const titles = tabs
      .map(
        (t, i) =>
          `<button role="tab" id="tab-${i}" aria-controls="panel-${i}" aria-selected="${i === 0}" onclick="selectTab(${i})" 
          style="border:1px solid var(--line);padding:.4rem .8rem;
          background:${i === 0 ? "var(--muted)" : "var(--bg)"};
          color:var(--fg);cursor:pointer;margin-right:.25rem;">
            ${t.title}
          </button>`
      )
      .join("");

    const panels = tabs
      .map(
        (t, i) =>
          `<div role="tabpanel" id="panel-${i}" aria-labelledby="tab-${i}" ${
            i === 0 ? "" : "hidden"
          } style="border:1px solid var(--line);border-top:none;
          padding:1rem;margin-top:-1px;white-space:pre-wrap;
          background:var(--bg);color:var(--fg);">
            ${t.content}
          </div>`
      )
      .join("");

    const js = `
<script>
function selectTab(i){
  var tabs=document.querySelectorAll('[role="tab"]');
  var panels=document.querySelectorAll('[role="tabpanel"]');
  tabs.forEach(function(tab,idx){
    var on=idx===i;
    tab.setAttribute('aria-selected',on);
    tab.style.background=on?'var(--muted)':'var(--bg)';
    tab.style.color='var(--fg)';
    panels[idx].hidden=!on;
  });
}
</script>`.trim();

    const sig = `<!-- Generated by Anand Yadav (21629311) -->`;

    return `<!-- Standalone Tabs -->
${sig}
<div role="tablist" aria-label="Tabs" 
     style="display:flex;align-items:center;gap:.25rem;
     border-bottom:1px solid var(--line);padding-bottom:.25rem;">
  ${titles}
</div>
${panels}
${js}`;
  }, [tabs]);

  return (
    <section className="wf-tabsArea" aria-labelledby="tabs-h">
      <h2 id="tabs-h" className="wf-sectionTitle">
        Tabs
      </h2>

      <div className="wf-grid3">
        {/* Left column: headers + [+][-] */}
        <div>
          <div className="wf-rowLabel">
            <span>Tabs Headers:</span>
            <button onClick={addTab} className="wf-plus">
              +
            </button>
            <button onClick={removeTab} className="wf-minus">
              âˆ’
            </button>
          </div>

          <div className="wf-stepList" role="tablist" aria-label="Tab headers">
            {tabs.map((t, i) => (
              <button
                key={i}
                role="tab"
                aria-selected={active === i}
                className={`wf-step ${active === i ? "is-active" : ""}`}
                onClick={() => setActive(i)}
              >
                {t.title}
              </button>
            ))}
          </div>
        </div>

        {/* Middle column: editable content */}
        <div>
          <h3 className="wf-subTitle">Tabs Content</h3>
          <div className="wf-contentBox">
            <textarea
              value={tabs[active]?.content ?? ""}
              onChange={(e) =>
                setTabs((prev) =>
                  prev.map((t, idx) =>
                    idx === active ? { ...t, content: e.target.value } : t
                  )
                )
              }
              rows={10}
            />
          </div>
        </div>

        {/* Right column: Output box */}
        <div>
          <label className="wf-outputLabel">Output</label>
          <pre className="wf-codeBox" aria-label="Generated HTML/JS">
            {output}
          </pre>
        </div>
      </div>
    </section>
  );
}
